{"Name":"Xamarin.InAppBilling","Id":695,"Alias":"xamarin.inappbilling","Description":"###About Xamarin.InAppBilling###\n\nIn-app Billing is a Google Play service that lets you sell a wide range digital content such as new game levels, downloadable media, or premium features directly from inside your Xamarin.Android mobile application. These purchases can either be standard, one-time billed products or recurring, automatically billed subscriptions.\n\nThe `Xamarin.InAppBilling` component simplifies the process of supporting In-App Billing (Version 3 API) by reducing the amount of common, repetitive code required and by adding several useful, helper functions.\n\n###Features###\n\n`Xamarin.InAppBilling` supports the following features:\n\n* **Connect** - Attaches your Xamarin.Android app to Google Play to process In-App Purchases.\n* **QueryInventoryAsync** - Given a list of product IDs, this routine will return all available products matching those IDs not already purchased by the current user.\n* **GetPurchases** - Returns a list of all purchases made by the current user.\n* **BuyProduct** - Calls Google Play to purchase the given product.\n* **ConsumePurchase** - Given a purchased product, this routine informs Google Play that the given product has been consumed and is available for purchase again.\n* **Disconnect** - Unbinds from Google Play when your Activity ends.\n\n###Events###\n\n`Xamarin.InAppBilling` defines the following events that you can monitor and respond to:\n\n* **OnConnected** - Raised when the component attaches to Google Play.\n* **OnDisconnected** - Raised when the component detaches from Google Play.\n* **OnInAppBillingError** - Raised when an error occurs inside the component.\n* **OnProductPurchasedError** - Raised when there is an error purchasing a product or subscription.\n* **OnProductPurchased** - Raised when the intent to purchase a product is successfully sent to Google Play.\n* **OnProductPurchaseCompleted** - Raised when a product or subscription is fully processed by Google Play and returned. \n* **OnPurchaseConsumedError** - Raised when there is an error consuming a purchase.\n* **OnPurchaseConsumed** - Raised when a purchase is successfully consumed.\n* **OnPurchaseFailedValidation** - Raised when a previous purchase fails validation.\n* **OnGetProductsError** - Raised when a request to *GetProducts* fails.\n* **OnInvalidOwnedItemsBundleReturned** - Raised when an invalid bundle of purchases is returned from Google Play.\n* **InAppBillingProcessingError** - Raised when any other type of processing issue not covered by an existing event occurs.\n\n###Secure Transactions###\n\nWhen developing Xamarin.Android applications that support In-App Billing there are several steps that should be taken to protect your app from being hacked by a malicious user and keep unlocked content safe.\n\nWhile the best practice is to perform signature verification on a remote server and not on a device, this might not always be possible. Another technique is to obfuscate your Google Play public key and never store the assembled key in memory. \n\n`Xamarin.InAppBilling` provides a quick and simple method to break your public key into a several pieces and to obfuscate those pieces. Once a public key has been provided to `Xamarin.InAppBilling` it is never stored as plain text, it is always encrypted in memory.\n\n###Android Examples###\n\nAnd here is an example of adding In-App Billing to an Android **Activity** using `Xamarin.InAppBilling`:\n\n```\nusing Xamarin.InAppBilling;\nusing Xamarin.InAppBilling.Utilities;\n...\n\n// Create a new connection to the Google Play Service\n_serviceConnection = new InAppBillingServiceConnection (this, \"\u003cpublic-key\u003e\");\n_serviceConnection.OnConnected += () =\u003e {\n\t\t\t\t\n\t// Load inventory or available products\n\tGetInventory();\n\n\t// Load any items already purchased\n\tLoadPurchasedItems();\n};\n\n// Attempt to connect to the service\n_serviceConnection.Connect ();\n...\n\nprivate async Task GetInventory () {\n\t// Ask the open connection\u0027s billing handler to return a list of available products for the \n\t// given list of items.\n\t// NOTE: We are asking for the Reserved Test Product IDs that allow you to test In-App\n\t// Billing without actually making a purchase.\n\t_products = await _serviceConnection.BillingHandler.QueryInventoryAsync (new List\u003cstring\u003e \t{\n\t\tReservedTestProductIDs.Purchased,\n\t\tReservedTestProductIDs.Canceled,\n\t\tReservedTestProductIDs.Refunded,\n\t\tReservedTestProductIDs.Unavailable\n\t}, ItemType.Product);\n\n\t// Were any products returned?\n\tif (_products == null) {\n\t\t// No, abort\n\t\treturn;\n\t}\n\t...\n}\n...\n\nprivate void LoadPurchasedItems () {\n\t// Ask the open connection\u0027s billing handler to get any purchases\n\tvar purchases = _serviceConnection.BillingHandler.GetPurchases (ItemType.Product);\n\n\t// Display any existing purchases\n\t...\n}\n...\n\n// Configure buy button\n_buyButton.Click += (sender, e) =\u003e {\n\t// Ask the open connection\u0027s billing handler to purchase the selected product\n\t_serviceConnection.BillingHandler.BuyProduct(_selectedProduct);\n};\n\n```\n\n_Some screenshots created with [PlaceIt](http://placeit.breezi.com \"PlaceIt by Breezi\")._\n","Version":"1.5","Summary":"Component to assist in adding In-App Billing to a Xamarin.Android application via Google Play Services.","QuickStart":"##Xamarin.InAppBilling Component##\n\n###Getting Started with Xamarin.InAppBilling###\n\nTo use an `Xamarin.InAppBilling` in your mobile application include the component in your project and reference the following using statements in your C# code:\n\n```\nusing Xamarin.InAppBilling;\nusing Xamarin.InAppBilling.Utilities;\n``` \n\n###A Special Note Security###\n\nWhen developing Xamarin.Android applications that support In-App Billing there are several steps that should be taken to protect your app from being hacked by a malicious user and keep unlocked content safe.\n\nWhile the best practice is to perform signature verification on a remote server and not on a device, this might not always be possible. Another technique is to obfuscate your Google Play public key and never store the assembled key in memory.\n\n`Xamarin.InAppBilling` provides the **Unify** routine that can be used to break your Google Play public key into two or more pieces and to obfuscate those pieces using one or more key/value pairs. In addition, `Xamarin.InAppBilling` always encrypts your private key while it\u0027s in memory.\n\nHere is an example of using **Unify** to obfuscate a private key:\n\n```\nstring value = Security.Unify (\n\tnew string[] { \"X0X0-1c...\", \"+123+Jq...\", \"//w/2jANB...\", \"...Kl+/ID43\" }, \n\tnew int[] { 2, 3, 1, 0 }, \n\tnew string[] {  \"X0X0-1\", \"9V4XD\", \"+123+\", \"R9eGv\", \"//w/2\", \"MIIBI\", \"+/ID43\", \"9alu4\" });\n```\nWhere the first parameter is an array of strings containing your private key broken into two or more parts in a random order. The second parameter is an array of integers listing of order that the private key parts should be assembled in. The third, optional, parameter is a list of key/value pairs that will be used to replace sequences in the assembled key.\n\n_**Note:** There are several more steps that should be taken to secure your application, please see Google\u0027s official [Security and Design](http://developer.android.com/google/play/billing/billing_best_practices.html) document for further details._\n\n###Connecting to Google Play###\n\nWhen your application\u0027s main activity first starts, you\u0027ll need to initially establish a connection to Google Play services to support In-App Billing.\n\nThe following is an example of using `Xamarin.InAppBilling` to connect to Google Play:\n\n```\nprivate InAppBillingServiceConnection _serviceConnection;\n...\n\n// Create a new connection to the Google Play Service\n_serviceConnection = new InAppBillingServiceConnection (this, publicKey);\n_serviceConnection.OnConnected += () =\u003e {\n\t// Load available products and any purchases\n\t...\n};\n\n// Attempt to connect to the service\n_serviceConnection.Connect ();\n```\n\nThe _OnConnected_ event will be raised once a successful connection to Google Play Services has been established.\n\n_**Note:** Remember to unbind from the In-app Billing service when you are done with your Activity. If you don’t unbind, the open service connection could cause your device’s performance to degrade._\n\n###Requesting Available Products###\n\nOnce you have an open connection you can request a list of available products that the user can purchase by providing a list of product ID. Here is an example:\n\n```\nprivate IList\u003cProduct\u003e _products;\n...\n\n_products = await _serviceConnection.BillingHandler.QueryInventoryAsync (new List\u003cstring\u003e {\n\tReservedTestProductIDs.Purchased,\n\tReservedTestProductIDs.Canceled,\n\tReservedTestProductIDs.Refunded,\n\tReservedTestProductIDs.Unavailable\n}, ItemType.Product);\n\n// Were any products returned?\nif (_products == null) {\n\t// No, abort\n\treturn;\n}\n```\nIn the above example we are requesting the four predefined reserved test Product ID provided by Google to test an application without actually making a purchase.\n\n###Purchasing a Product###\n\nPurchasing a product can be accomplished using the following:\n\n```\n// Ask the open connection\u0027s billing handler to purchase the selected product\n_serviceConnection.BillingHandler.BuyProduct(_selectedProduct);\n```\nWhere **_selectedProduct** is one of the products returned by the **QueryInventoryAsync** routine above.\n\n###Handling the Purchase Result###\n\nWhen the user attempts to purchase an In App Billing product from your application, the _OnProductPurchased_ event will be raised when the purchase is successfully handed off to the Google Play app to be processed.\n\nTo complete the purchase cycle, you will need to override the **OnActivityResult** method of the Activity of the app that initiated the purchase and pass the result to the _HandleActivityResult_ method of the _BillingHandler_ of your open _InAppBillingServiceConnection_:\n\n```\nprotected override void OnActivityResult (int requestCode, Result resultCode, Intent data)\n{\n\t// Ask the open service connection\u0027s billing handler to process this request\n\t_serviceConnection.BillingHandler.HandleActivityResult (requestCode, resultCode, data);\n\n\t// TODO: Use a call back to update the purchased items\n\t// or listen to the OnProductPurchaseCompleted event to\n\t// handle a successful purchase\n}\n```\n\nWith the above code in place, you can listen to the _OnProductPurchaseCompleted_ event of the _BillingHandler_ to handle the successful purchase of the product or simply request the full list of purchased products again from the _BillingHandler_.\n\n**PLEASE NOTE: The _OnProductPurchaseCompleted_ event will not be raised unless you have overridden the _OnActivityResult_ method of the Activity that initiated the purchase and passed the result to the _HandleActivityResult_ for processing!**\n\nAny issues processing a purchase will raise either the _OnProductPurchasedError_, _OnPurchaseFailedValidation_ or _InAppBillingProcessingError_ events with details of the issue that stopped processing.\n\n###Requesting a List of Previous Purchases###\n\nAfter the user has purchased one or more products, the following code will request a list of those purchases:\n\n```\n// Ask the open connection\u0027s billing handler to get any purchases\nvar purchases = _serviceConnection.BillingHandler.GetPurchases (ItemType.Product);\n```\n\n###Consuming a Purchase###\n\nFor products that are consumable in your application, such as coins or tokens, use the following code to inform Google Play that a given product purchase has been consumed:\n\n```\n// Attempt to consume the given product\nbool result = _serviceConnection.BillingHandler.ConsumePurchase (purchasedItem);\n\n// Was the product consumed?\nif (result) {\n\t// Yes, update interface\n\t...\n}\n```\nWhere **purchasedItem** is a purchase returned by the **GetPurchases** routine above. The _OnPurchaseConsumed_ event will be raised if the product is successfuly purchased else the _OnPurchaseConsumedError_ event will be raised.\n\n###Disconnecting from Google Play###\n\nWhen you are done with your Activity you must remember to unbind from the In-app Billing service. If you don’t unbind, the open service connection could cause your device’s performance to degrade.\n\nTo do this, override you Activity\u0027s **OnDestroy** method and call the **Disconnect** routine:\n\n```\nprotected override void OnDestroy () {\n\t\t\t\n\t// Are we attached to the Google Play Service?\n\tif (_serviceConnection != null) {\n\t\t// Yes, disconnect\n\t\t_serviceConnection.Disconnect ();\n\t}\n\n\t// Call base method\n\tbase.OnDestroy ();\n}\n```\n\n###Events###\n\n`Xamarin.InAppBilling` defines the following events that you can monitor and respond to:\n\n* **OnConnected** - Raised when the component attaches to Google Play.\n* **OnDisconnected** - Raised when the component detaches from Google Play.\n* **OnInAppBillingError** - Raised when an error occurs inside the component.\n* **OnProductPurchasedError** - Raised when there is an error purchasing a product or subscription.\n* **OnProductPurchased** - Raised when the intent to purchase a product is successfully sent to Google Play. The _OnProductPurchaseCompleted_ is raised when the purchase intent is successfully processed by Google Play and the result returned.\n* **OnProductPurchaseCompleted** - Raised when a product or subscription is fully processed by Google Play and returned. _NOTE: You should check the state of the response code as this event is raised for both successful and unsuccessful purchases._\n* **OnPurchaseConsumedError** - Raised when there is an error consuming a purchase.\n* **OnPurchaseConsumed** - Raised when a purchase is successfully consumed.\n* **OnPurchaseFailedValidation** - Raised when a previous purchase fails validation. This is ususally caused when the application\u0027s Public Key does not match the Public Key in the Google Developer Console 100%.\n* **OnGetProductsError** - Raised when a request to *GetProducts* fails.\n* **OnInvalidOwnedItemsBundleReturned** - Raised when an invalid bundle of purchases is returned from Google Play.\n* **InAppBillingProcessingError** - Raised when any other type of processing issue not covered by an existing event occurs.\n\n##Examples##\n\nFor full examples of using `Xamarin.InAppBilling` in your mobile application, please see the  _Xamarin.InAppBilling_ example app included with this component.\n\nSee the API documentation for `Xamarin.InAppBilling` for a complete list of features and their usage.\n\n## Other Resources\n\n* [Xamarin Components](https://components.xamarin.com)\n* [Implementing In-app Billing (IAB Version 3)](http://developer.android.com/google/play/billing/billing_integrate.html)\n* [Security and Design](http://developer.android.com/google/play/billing/billing_best_practices.html)\n* [Support](http://xamarin.com/support)","Hash":"ce1ee1485c752eab820f08e8dcd409cf","TargetPlatforms":["android"],"TrialHash":null}